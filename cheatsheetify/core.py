from fpdf import FPDF
from typing_extensions import Annotated
from typing import Dict, List
import typer
from rich.progress import track
from enum import Enum

from cheatsheetify.cheatsheet_generator import generate_cheatsheet
from cheatsheetify.pdf_generator import generate_pdf
import cheatsheetify.themes as themes


class PDF(FPDF):
    background_color = (255, 255, 255)

    def header(self):
        self.set_background_color(*self.background_color)

    def set_background_color(self, r, g, b):
        self.set_fill_color(r, g, b)
        self.background_color = r, g, b
        self.rect(0, 0, self.w, self.h, "F")


class Schema(str, Enum):
    Macchiato = "Macchiato"
    Nord = "Nord"
    Rose = "Rose"


def main(
    commands: Annotated[
        List[str],
        typer.Argument(
            help="List of commands to generate cheatsheet.pdf", show_default=False
        ),
    ],
    title: Annotated[str, typer.Option(help="Provide the title")] = "Cheat Sheet",
    filename: Annotated[
        str, typer.Option(help="Provide the filename for PDF")
    ] = "cheatsheet",
    theme: Annotated[Schema, typer.Option(help="Select a theme")] = Schema.Macchiato,
    credits: Annotated[
        bool, typer.Option(help="Give credit to cheatsheetify in PDF")
    ] = True,
):

    palatte = getattr(themes, f"{theme}")
    pdf = PDF()
    pdf.add_page()
    pdf.set_background_color(*palatte["background"])

    # Add custom fonts
    pdf.add_font("inter", style="", fname="cheatsheetify/fonts/Inter.ttf")
    pdf.add_font("inter", style="I", fname="cheatsheetify/fonts/Inter-Italic.ttf")
    pdf.add_font("firacode", style="", fname="cheatsheetify/fonts/FiraCode.ttf")

    # Add header title
    pdf.set_font(family="inter", style="", size=32)
    pdf.set_text_color(*palatte["orange"])
    pdf.multi_cell(w=0, text=title, new_x="LEFT", new_y="NEXT", align="C")

    # Add credit
    if credits:
        pdf.ln(2)
        pdf.set_font(family="firacode", style="", size=12)
        pdf.set_text_color(*palatte["red"])
        pdf.multi_cell(
            w=0,
            text="generated by cheatsheetify",
            new_x="LEFT",
            new_y="NEXT",
            align="C",
            link="https://github.com/HYP3R00T/Cheatsheetify",
        )

    # Add line
    pdf.ln(7)
    pdf.set_line_width(0.5)
    pdf.set_draw_color(*palatte["background_secondary"])
    pdf.set_dash_pattern(dash=2, gap=2)
    line_width = 199
    line_x = pdf.w / 2 - line_width / 2
    pdf.line(line_x, pdf.y, line_x + line_width, pdf.y)
    pdf.ln(7)

    # Generate pdf elements for each command
    missing_commands = []
    for command in track(commands, description="Generating..."):
        cheatsheet: Dict | str = generate_cheatsheet(command)
        if not isinstance(cheatsheet, str):
            pdf = generate_pdf(pdf, cheatsheet, palatte)
        elif isinstance(cheatsheet, str):
            missing_commands.append(cheatsheet)

    # generate pdf
    pdf.output(f"{filename}.pdf")

    # print list of command that doesn't have cheatsheet
    if missing_commands:
        print("Couldn't generate cheat sheet for the following command(s)")
        for x in missing_commands:
            print(str(x))
