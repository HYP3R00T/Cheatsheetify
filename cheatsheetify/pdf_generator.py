from typing import Dict

from fpdf import FPDF
from rich.progress import track

import cheatsheetify.themes as themes
from cheatsheetify.cheatsheet_generator import generate_cheatsheet


class PDF(FPDF):
    """Custom class to modify the background color."""

    background_color = (255, 255, 255)

    def header(self):
        self.set_background_color(*self.background_color)

    def set_background_color(self, r, g, b):
        self.set_fill_color(r, g, b)
        self.background_color = r, g, b
        self.rect(0, 0, self.w, self.h, "F")


def generate_pdf(input_values: Dict):
    commands = input_values["commands"]
    title = input_values["title"]
    filename = input_values["filename"]
    credits = input_values["credits"]

    theme = str(input_values["theme"]).split(".")[-1]
    global_theme = getattr(themes, f"{theme}")

    colors = global_theme["colors"]
    fonts = global_theme["fonts"]
    style = global_theme["style"]

    pdf = PDF(orientation="landscape")
    pdf.add_page()
    pdf.set_background_color(*colors["background"])

    for font in fonts:
        pdf.add_font(*font)

    # Add header title
    pdf.set_font(*style["title"])
    pdf.set_text_color(*colors["title"])
    pdf.multi_cell(w=0, text=title, new_x="LEFT", new_y="NEXT", align="C")

    # Add credit
    if credits:
        pdf.ln(2)
        pdf.set_font(*style["credit"])
        pdf.set_text_color(*colors["credit"])
        pdf.multi_cell(
            w=0,
            text="generated by cheatsheetify",
            align="C",
            link="https://github.com/HYP3R00T/Cheatsheetify",
        )

    # Add separator
    pdf.ln(7)
    pdf.set_line_width(0.5)
    pdf.set_draw_color(*colors["separator"])
    pdf.set_dash_pattern(dash=2, gap=2)
    line_width = 199
    line_x = pdf.w / 2 - line_width / 2
    pdf.line(line_x, pdf.y, line_x + line_width, pdf.y)
    pdf.ln(7)

    # Generate pdf elements for each command
    missing_commands = []
    for command in track(commands, description="Generating..."):
        cheatsheet: Dict | str = generate_cheatsheet(command)
        if not isinstance(cheatsheet, str):
            pdf = generate_components(pdf, cheatsheet, input_values)
        elif isinstance(cheatsheet, str):
            missing_commands.append(cheatsheet)

    # generate pdf
    pdf.output(f"{filename}.pdf")


def generate_components(pdf: PDF, cheatsheet: str, input_values: Dict):
    theme = str(input_values["theme"]).split(".")[-1]
    global_theme = getattr(themes, f"{theme}")

    colors = global_theme["colors"]
    style = global_theme["style"]

    # Add info about commands
    # Add heading
    pdf.set_font(*style["command"])
    pdf.set_text_color(*colors["command"])
    pdf.set_fill_color(*colors["command_fill"])
    pdf.multi_cell(
        w=0,
        text=cheatsheet["info"]["command"],
        new_x="LEFT",
        new_y="NEXT",
        fill=True,
        padding=2,
    )
    pdf.ln(2)

    # Add description
    pdf.set_font(*style["description"])
    pdf.set_text_color(*colors["description"])
    pdf.multi_cell(
        w=0, text=cheatsheet["info"]["description"], new_x="LEFT", new_y="NEXT"
    )
    pdf.ln(2)

    # Add link
    pdf.set_font(*style["anchor"])
    pdf.set_text_color(*colors["anchor"])
    pdf.multi_cell(w=0, text=cheatsheet["info"]["homepage"], new_x="LEFT", new_y="NEXT")
    pdf.ln(5)

    # Add comamnds and their explaination
    for key, value in cheatsheet["commands"].items():
        pdf.set_font(*style["list_item"])
        pdf.set_text_color(*colors["list_item"])
        pdf.multi_cell(w=0, text=f"\u2022{key}", new_x="LEFT", new_y="NEXT")
        pdf.ln(2)

        pdf.set_font(*style["list_item_description"])
        pdf.set_text_color(*colors["list_item_description"])
        pdf.multi_cell(
            w=0, text=f"{value}", new_x="LEFT", new_y="NEXT", padding=(0, 0, 0, 3)
        )
        pdf.ln(4)
    pdf.ln(7)

    return pdf
